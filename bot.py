import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web

# --- ржзрж╛ржк рзз: .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
load_dotenv()

# --- ржЖржкржирж╛рж░ ржмржЯ ржПржмржВ ржПржкрж┐ржЖржЗ ржХрзА ---
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") 
PORT = int(os.getenv("PORT", 8080))

# --- рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ рж╕ржорж╕рзНржпрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ ---
# ржПржЗ ржХрзЛржбржЯрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░ржмрзЗ ржпрзЗ Render-ржП рж╕ржм ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржарж┐ржХржорждрзЛ ржжрзЗржУрзЯрж╛ ржЖржЫрзЗ
if not all([API_ID, API_HASH, BOT_TOKEN, WEBHOOK_URL]):
    error_message = """
    !!! ржорж╛рж░рж╛рждрзНржоржХ рж╕ржорж╕рзНржпрж╛ !!!
    ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рж╕ржм Environment Variables рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред
    ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ Render ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржбрзЗрж░ 'Environment' рж╕рзЗржХрж╢ржирзЗ ржпрж╛ржи ржПржмржВ ржирж┐ржЪрзЗрж░ рж╕ржмржЧрзБрж▓рзЛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж╕рзЗржЯ ржХрж░рзБржи:
    - API_ID
    - API_HASH
    - BOT_TOKEN
    - WEBHOOK_URL (ржЖржкржирж╛рж░ Render ржЕрзНржпрж╛ржкрзЗрж░ рж▓рж┐ржВржХ, ржпрзЗржоржи: https://your-app-name.onrender.com)
    """
    raise ValueError(error_message)

try:
    API_ID = int(API_ID)
except ValueError:
    raise ValueError("API_ID ржЕржмрж╢рзНржпржЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╣рждрзЗ рж╣ржмрзЗред")


# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╕рзНржЯрзЛрж░рзЗржЬ ---
video_pending = {}
user_cover = {}

# --- Pyrogram ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ (ржУрзЯрзЗржмрж╣рзБржХрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд) ---
app = Client("thumb_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN, no_updates=True)

# --- ржлрж╛ржЗрж▓ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
def cleanup_file(path):
    try:
        if path and os.path.exists(path):
            os.remove(path)
    except Exception as e:
        print(f"ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {path}: {e}")

# --- ржмржЯ ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ ---
BOT_COMMANDS = [
    types.BotCommand("start", "ЁЯдЦ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи"),
    types.BotCommand("show_cover", "ЁЯЦ╝я╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржжрзЗржЦрзБржи"),
    types.BotCommand("del_cover", "ЁЯЧСя╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзБржи"),
]

# --- ржХржорж╛ржирзНржб ржПржмржВ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЖржкржирж╛рж░ ржЖржЧрзЗрж░ ржХрзЛржбрзЗрж░ ржорждрзЛржЗ) ---

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    await message.reply_text(
        "ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ!\n\n"
        "ЁЯдЦ **Video Thumb Bot**-ржП ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред\n\n"
        "ЁЯУМ **ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рзЯржо:**\n"
        "ржкрзНрж░ржержорзЗ ржЫржмрж┐ ржкрж╛ржарж╛ржи, рждрж╛рж░ржкрж░ ржнрж┐ржбрж┐ржУред ржЕржержмрж╛ ржкрзНрж░ржержорзЗ ржнрж┐ржбрж┐ржУ, рждрж╛рж░ржкрж░ ржЫржмрж┐ред ржмржЯ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзЗржЯ ржХрж░рзЗ ржжрзЗржмрзЗред\n\n"
        "тЬЕ **ржЖржкржирж╛рж░ ржЬржирзНржп ржХржорж╛ржирзНржбрж╕ржорзВрж╣:**\n"
        "тЮв /show_cover - ржмрж░рзНрждржорж╛ржирзЗ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржжрзЗржЦрждрзЗред\n"
        "тЮв /del_cover - рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗред\n\n"
        "ржПржЦржиржЗ ржПржХржЯрж┐ ржЫржмрж┐ ржмрж╛ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж┐рзЯрзЗ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рзБржи!"
    )

@app.on_message(filters.command("show_cover"))
async def show_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.get(user_id)
    if not cover_path or not os.path.exists(cover_path):
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржПржЦржирзЛ ржХрзЛржирзЛ ржХржнрж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржирзЗржЗред ржкрзНрж░ржержорзЗ ржПржХржЯрж┐ ржЫржмрж┐ ржкрж╛ржарж╛ржиред")
        return
    await client.send_photo(chat_id=message.chat.id, photo=cover_path, caption="ЁЯУМ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржирзЗ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░/ржерж╛ржорзНржмржирзЗржЗрж▓ред")

@app.on_message(filters.command("del_cover"))
async def del_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.pop(user_id, None)
    if cover_path:
        cleanup_file(cover_path)
        await message.reply_text("тЬЕ ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред")
    else:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрзЛржирзЛ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫрж┐рж▓ ржирж╛ред")

@app.on_message(filters.photo)
async def receive_photo(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    cleanup_file(user_cover.get(user_id))
    status_msg = await message.reply_text("ЁЯУе ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
    photo_path = await message.download(file_name=f"downloads/{user_id}_cover.jpg")
    user_cover[user_id] = photo_path
    pending_video = video_pending.get(user_id)
    if pending_video:
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            await client.send_video(chat_id=pending_video["chat_id"], video=pending_video["video_path"], thumb=photo_path, caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУрж░ рж╕рж╛ржерзЗ ржХрж╛рж╕рзНржЯржо ржерж╛ржорзНржмржирзЗржЗрж▓ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", reply_to_message_id=pending_video["video_msg_id"])
            await status_msg.edit_text("ЁЯкД ржнрж┐ржбрж┐ржУржЯрж┐рж░ ржЬржирзНржп ржХржнрж╛рж░ рж╕рзЗржЯ ржХрж░рзЗ ржкрж╛ржарж┐рзЯрзЗ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            cleanup_file(pending_video.get("video_path"))
            video_pending.pop(user_id, None)
    else:
        await status_msg.edit_text("тЬФя╕П ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ рж╕рзЗржн ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПржЦржи ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред")

@app.on_message(filters.video)
async def receive_video(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    cover_path = user_cover.get(user_id)
    status_msg = await message.reply_text("ЁЯУе ржнрж┐ржбрж┐ржУржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
    vid_path = await message.download(file_name=f"downloads/{user_id}_video.mp4")
    if cover_path and os.path.exists(cover_path):
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            await client.send_video(chat_id=message.chat.id, video=vid_path, thumb=cover_path, caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУржЯрж┐ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░рж╕рж╣ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред", reply_to_message_id=message.message_id)
            await status_msg.edit_text("ЁЯОЙ рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрж╛рж╕рзНржЯржо ржХржнрж╛рж░рж╕рж╣ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            cleanup_file(vid_path)
    else:
        cleanup_file(video_pending.get(user_id, {}).get("video_path"))
        video_pending[user_id] = {"video_path": vid_path, "video_msg_id": message.message_id, "chat_id": message.chat.id}
        await status_msg.edit_text("тЬФя╕П ржнрж┐ржбрж┐ржУ ржкрзЗрзЯрзЗржЫрж┐ред ржПржЦржи ржПржХржЯрж┐ ржерж╛ржорзНржмржирзЗржЗрж▓ (ржЫржмрж┐) ржкрж╛ржарж╛ржиред")

# --- ржУрзЯрзЗржмрж╣рзБржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржПржмржВ ржУрзЯрзЗржм ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ---

async def webhook_handler(request):
    try:
        update_data = await request.json()
        await app.feed_raw_update(update_data)
        return web.Response(status=200)
    except Exception as e:
        print(f"ржУрзЯрзЗржмрж╣рзБржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return web.Response(status=500)

async def on_startup(web_app):
    print("--- ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ ---")
    if not os.path.isdir("downloads"):
        os.makedirs("downloads")
    
    await app.start()
    
    # ржУрзЯрзЗржмрж╣рзБржХ URL рждрзИрж░рж┐ ржПржмржВ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗрж░ ржХрж╛ржЫрзЗ рж╕рзЗржЯ ржХрж░рж╛
    webhook_path = f"/{BOT_TOKEN}"
    full_webhook_url = WEBHOOK_URL.rstrip('/') + webhook_path
    
    try:
        print(f"ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗрж░ ржХрж╛ржЫрзЗ ржУрзЯрзЗржмрж╣рзБржХ рж╕рзЗржЯ ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржЪрж▓ржЫрзЗ: {full_webhook_url}")
        await app.set_bot_webhook(url=full_webhook_url)
        await app.set_bot_commands(BOT_COMMANDS)
        print("тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржУрзЯрзЗржмрж╣рзБржХ ржПржмржВ ржХржорж╛ржирзНржб рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        print("ЁЯЪА ржмржЯ ржПржЦржи ржЕржирж▓рж╛ржЗржирзЗ ржЖржЫрзЗ ржПржмржВ ржорзЗрж╕рзЗржЬ ржЧрзНрж░рж╣ржгрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБрждред")
    except Exception as e:
        print(f"!!! ржУрзЯрзЗржмрж╣рзБржХ рж╕рзЗржЯ ржХрж░рждрзЗ ржорж╛рж░рж╛рждрзНржоржХ рж╕ржорж╕рзНржпрж╛: {e}")
        print("рж╕ржорж╛ржзрж╛ржи: ржЖржкржирж╛рж░ BOT_TOKEN ржПржмржВ WEBHOOK_URL рж╕ржарж┐ржХ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред")

async def on_shutdown(web_app):
    print("--- ржмржЯ ржмржирзНржз рж╣ржЪрзНржЫрзЗ ---")
    await app.stop()

if __name__ == "__main__":
    web_app = web.Application()
    web_app.on_startup.append(on_startup)
    web_app.on_shutdown.append(on_shutdown)
    web_app.router.add_post(f"/{BOT_TOKEN}", webhook_handler)
    
    print(f"ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ http://0.0.0.0:{PORT} ржкрзЛрж░рзНржЯрзЗ")
    web.run_app(web_app, host="0.0.0.0", port=PORT)
