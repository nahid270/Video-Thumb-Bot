import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web
from PIL import Image # ‚òÖ‚òÖ‚òÖ Pillow ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã ‚òÖ‚òÖ‚òÖ

# --- .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ---
load_dotenv()
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))
LOG_CHANNEL_ID_STR = os.getenv("LOG_CHANNEL_ID")

if not all([API_ID, API_HASH, BOT_TOKEN, LOG_CHANNEL_ID_STR]):
    raise ValueError("‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü Environment Variables ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")

API_ID = int(API_ID)
LOG_CHANNEL_ID = int(LOG_CHANNEL_ID_STR)

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ---
user_data = {}

app = Client("thumb_bot_final", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def cleanup_files(*paths):
    for path in paths:
        try:
            if path and os.path.exists(path):
                os.remove(path)
        except Exception as e:
            print(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {path}: {e}")

# --- ‚òÖ‚òÖ‚òÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶∏‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‚òÖ‚òÖ‚òÖ ---
def create_thumbnail(file_path: str) -> str:
    try:
        thumb_path = f"{file_path}_thumb.jpg"
        with Image.open(file_path) as img:
            # ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú 320x320 ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            img.thumbnail((320, 320))
            # RGBA (PNG) ‡¶π‡¶≤‡ßá RGB (JPEG) ‡¶§‡ßá ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
            if img.mode == 'RGBA':
                img = img.convert('RGB')
            img.save(thumb_path, "JPEG")
        return thumb_path
    except Exception as e:
        print(f"‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return None

async def get_new_file_id(message: Message):
    try:
        copied_message = await message.copy(chat_id=LOG_CHANNEL_ID)
        return copied_message.video.file_id if copied_message.video else None
    except Exception as e:
        print(f"‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return None

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    user_data.pop(message.from_user.id, None)
    await message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶õ‡¶¨‡¶ø ‡¶ì ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡•§")

@app.on_message(filters.photo)
async def receive_photo(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    
    status_msg = await message.reply_text("üñºÔ∏è ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø...", quote=True)
    
    # ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    original_photo_path = await message.download(file_name=f"downloads/{message.id}_original.jpg")
    
    # ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    thumb_path = create_thumbnail(original_photo_path)
    
    if not thumb_path:
        await status_msg.edit_text("‚ùå ‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        cleanup_files(original_photo_path)
        return

    if user_id not in user_data:
        user_data[user_id] = {}
    
    # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
    cleanup_files(user_data[user_id].get("thumb_path"))
    user_data[user_id]['thumb_path'] = thumb_path
    
    if 'video_id' in user_data[user_id]:
        await status_msg.edit_text("‚è≥ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø...")
        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=user_data[user_id]['video_id'],
                thumb=user_data[user_id]['thumb_path'],
                caption="‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
                reply_to_message_id=user_data[user_id]['video_msg_id']
            )
            await status_msg.delete()
        except Exception as e:
            await status_msg.edit_text(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        finally:
            cleanup_files(user_data[user_id].get("thumb_path"))
            user_data.pop(user_id, None)
    else:
        await status_msg.edit_text("‚úîÔ∏è ‡¶ï‡¶≠‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§ ‡¶è‡¶ñ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
    
    # ‡¶Ü‡¶∏‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
    cleanup_files(original_photo_path)

@app.on_message(filters.video)
async def receive_video(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id

    status_msg = await message.reply_text("üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø...", quote=True)

    new_video_id = await get_new_file_id(message)
    if not new_video_id:
        await status_msg.edit_text("‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return
        
    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]['video_id'] = new_video_id
    user_data[user_id]['video_msg_id'] = message.id
    
    if 'thumb_path' in user_data[user_id]:
        await status_msg.edit_text("‚è≥ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø...")
        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=user_data[user_id]['video_id'],
                thumb=user_data[user_id]['thumb_path'],
                caption="‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
                reply_to_message_id=message.id
            )
            await status_msg.delete()
        except Exception as e:
            await status_msg.edit_text(f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        finally:
            cleanup_files(user_data[user_id].get("thumb_path"))
            user_data.pop(user_id, None)
    else:
        await status_msg.edit_text("‚úîÔ∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§ ‡¶è‡¶ñ‡¶® ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

async def on_startup(web_app):
    if not os.path.isdir("downloads"):
        os.makedirs("downloads")
    await asyncio.gather(app.start(), start_web_server())
    print("üöÄ ‡¶¨‡¶ü ‡¶è‡¶ñ‡¶® ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ü‡¶õ‡ßá‡•§")

async def start_web_server():
    web_app = web.Application()
    async def ping_handler(request):
        return web.Response(text="alive", status=200)
    web_app.router.add_get("/", ping_handler)
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(None))
    loop.run_forever()
