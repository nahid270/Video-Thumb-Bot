import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web

# --- .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
load_dotenv()

# --- ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))

# --- ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржарж┐ржХржорждрзЛ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ ---
if not all([API_ID, API_HASH, BOT_TOKEN]):
    raise ValueError("ржкрзНрж░рзЯрзЛржЬржирзАрзЯ Environment Variables (API_ID, API_HASH, BOT_TOKEN) рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")

API_ID = int(API_ID)

# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╕рзНржЯрзЛрж░рзЗржЬ (ржПржЦржи ржЖржорж░рж╛ file_id рж╕рзЗржн ржХрж░ржм, ржлрж╛ржЗрж▓рзЗрж░ ржкрж╛рже ржирзЯ) ---
video_pending = {}  # {user_id: {"video_file_id": "...", "video_msg_id": ...}}
user_cover = {}     # {user_id: "photo_file_id"}

# --- Pyrogram ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ ---
app = Client("thumb_bot_fast", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- ржмржЯ ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ ---
BOT_COMMANDS = [
    types.BotCommand("start", "ЁЯдЦ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи"),
    types.BotCommand("show_cover", "ЁЯЦ╝я╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржжрзЗржЦрзБржи"),
    types.BotCommand("del_cover", "ЁЯЧСя╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзБржи"),
]

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржПржЦржи file_id ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛) ---

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    await message.reply_text("ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! ржПржЗ ржмржЯржЯрж┐ ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржирж╛ ржХрж░рзЗржЗ ржжрзНрж░рзБржд ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзЗржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗред")

@app.on_message(filters.command("show_cover"))
async def show_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_file_id = user_cover.get(user_id)
    if not cover_file_id:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржПржЦржирзЛ ржХрзЛржирзЛ ржХржнрж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржирзЗржЗред")
        return
    # рж╕рзЗржн ржХрж░рж╛ file_id ржжрж┐рзЯрзЗ ржЫржмрж┐ ржкрж╛ржарж╛ржирзЛ
    await client.send_photo(chat_id=message.chat.id, photo=cover_file_id, caption="ЁЯУМ ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░/ржерж╛ржорзНржмржирзЗржЗрж▓ред")

@app.on_message(filters.command("del_cover"))
async def del_cover(client: Client, message: Message):
    user_id = message.from_user.id
    if user_cover.pop(user_id, None):
        await message.reply_text("тЬЕ ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред")
    else:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрзЛржирзЛ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫрж┐рж▓ ржирж╛ред")

@app.on_message(filters.photo)
async def receive_photo(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    
    # ржЫржмрж┐рж░ file_id рж╕рзЗржн ржХрж░рж╛
    photo_file_id = message.photo.file_id
    user_cover[user_id] = photo_file_id

    pending_video = video_pending.get(user_id)
    if pending_video:
        status_msg = await message.reply_text("тП│ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
        try:
            # ржбрж╛ржЙржирж▓рзЛржб/ржЖржкрж▓рзЛржб ржЫрж╛рзЬрж╛ рж╕рж░рж╛рж╕рж░рж┐ file_id ржжрж┐рзЯрзЗ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ
            await client.send_video(
                chat_id=message.chat.id,
                video=pending_video["video_file_id"],
                thumb=photo_file_id,
                caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУрж░ рж╕рж╛ржерзЗ ржХрж╛рж╕рзНржЯржо ржерж╛ржорзНржмржирзЗржЗрж▓ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
                reply_to_message_id=pending_video["video_msg_id"]
            )
            await status_msg.delete() # рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржорзЗрж╕рзЗржЬ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ ржжрзЗржУрзЯрж╛
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            video_pending.pop(user_id, None)
    else:
        await message.reply_text("тЬФя╕П ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ рж╕рзЗржн ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПржЦржи ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред", quote=True)

@app.on_message(filters.video)
async def receive_video(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    
    video_file_id = message.video.file_id
    cover_file_id = user_cover.get(user_id)
    
    status_msg = await message.reply_text("тП│ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)

    if cover_file_id:
        try:
            # ржбрж╛ржЙржирж▓рзЛржб/ржЖржкрж▓рзЛржб ржЫрж╛рзЬрж╛ рж╕рж░рж╛рж╕рж░рж┐ file_id ржжрж┐рзЯрзЗ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ
            await client.send_video(
                chat_id=message.chat.id,
                video=video_file_id,
                thumb=cover_file_id,
                caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУржЯрж┐ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░рж╕рж╣ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред",
                reply_to_message_id=message.message_id
            )
            await status_msg.delete()
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
    else:
        # ржХрзЛржирзЛ ржХржнрж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржирж╛ ржерж╛ржХрж▓рзЗ, ржнрж┐ржбрж┐ржУрж░ file_id рж╕рзЗржн ржХрж░рзЗ рж░рж╛ржЦрж╛
        video_pending[user_id] = {
            "video_file_id": video_file_id,
            "video_msg_id": message.message_id
        }
        await status_msg.edit_text("тЬФя╕П ржнрж┐ржбрж┐ржУ ржкрзЗрзЯрзЗржЫрж┐ред ржПржЦржи ржПржХржЯрж┐ ржерж╛ржорзНржмржирзЗржЗрж▓ (ржЫржмрж┐) ржкрж╛ржарж╛ржиред")

# --- ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржПржмржВ ржорзВрж▓ ржлрж╛ржВрж╢ржи (ржЖржЧрзЗрж░ ржорждрзЛржЗ) ---
async def ping_handler(request):
    return web.Response(text="I am alive!", status=200)

async def start_web_server():
    web_app = web.Application()
    web_app.router.add_get("/", ping_handler)
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"тЬЕ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржкрж┐ржВ ржЧрзНрж░рж╣ржгрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд http://0.0.0.0:{PORT} ржкрзЛрж░рзНржЯрзЗ")

async def main():
    await asyncio.gather(app.start(), start_web_server())
    await app.set_bot_commands(BOT_COMMANDS)
    print("ЁЯЪА ржмржЯ ржПржЦржи ржЕржирж▓рж╛ржЗржирзЗ ржЖржЫрзЗ ржПржмржВ ржкрзЛрж▓рж┐ржВ ржорзЛржбрзЗ ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ...")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        app.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("ржмржЯ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛред")
