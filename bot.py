import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web

load_dotenv()

# --- ржЖржкржирж╛рж░ ржмржЯ ржПржмржВ ржПржкрж┐ржЖржЗ ржХрзА ---
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржУ ржУрзЯрзЗржмрж╣рзБржХ ржПрж░ ржЬржирзНржп ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ---
# ржПржЗ URL ржЯрж┐ ржЖржкржирж╛ржХрзЗ рж╣рзЛрж╕рзНржЯрж┐ржВ рж╕рж╛рж░рзНржнрж┐рж╕ ржерзЗржХрзЗ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗред ржпрзЗржоржи: https://your-app-name.onrender.com
WEBHOOK_URL = os.getenv("WEBHOOK_URL") 
PORT = int(os.getenv("PORT", 8080)) # рж╣рзЛрж╕рзНржЯрж┐ржВ рж╕рж╛рж░рзНржнрж┐рж╕ ржПржЗ ржкрзЛрж░рзНржЯ ржиржорзНржмрж░ржЯрж┐ ржжрзЗрзЯ

# --- ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржарж┐ржХржорждрзЛ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ ---
if not all([API_ID, API_HASH, BOT_TOKEN, WEBHOOK_URL]):
    raise ValueError("ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ (API_ID, API_HASH, BOT_TOKEN, WEBHOOK_URL) рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")

API_ID = int(API_ID)

# --- ржЖржЧрзЗрж░ ржорждрзЛржЗ рж╕рзНржЯрзЛрж░рзЗржЬ ---
video_pending = {}
user_cover = {}

# --- Pyrogram ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ (ржПржЦржи no_updates=True ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣ржмрзЗ) ---
# ржХрж╛рж░ржг ржЖржорж░рж╛ ржУрзЯрзЗржмрж╣рзБржХ ржерзЗржХрзЗ ржЖржкржбрзЗржЯ ржирзЗржм, ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржкрзЛрж▓рж┐ржВ ржХрж░ржм ржирж╛
app = Client("thumb_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN, no_updates=True)

# --- ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
def cleanup_file(path):
    try:
        if path and os.path.exists(path):
            os.remove(path)
    except Exception as e:
        print(f"ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {path}: {e}")

# --- ржмржЯ-ржПрж░ ржЬржирзНржп ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ ---
# ржПржЯрж┐ ржХрж░рж▓рзЗ / ржЪрж╛ржк ржжрж┐рж▓рзЗржЗ ржЗржЙржЬрж╛рж░рж░рж╛ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ ржжрзЗржЦрждрзЗ ржкрж╛ржмрзЗ
BOT_COMMANDS = [
    types.BotCommand("start", "ЁЯдЦ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи"),
    types.BotCommand("show_cover", "ЁЯЦ╝я╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржжрзЗржЦрзБржи"),
    types.BotCommand("del_cover", "ЁЯЧСя╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзБржи"),
]

# --- ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ---

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    await message.reply_text(
        "ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ!\n\n"
        "ЁЯдЦ **Video Thumb Bot**-ржП ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржоред\n\n"
        "ЁЯУМ **ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рзЯржо:**\n"
        "ржкрзНрж░ржержорзЗ ржЫржмрж┐ ржкрж╛ржарж╛ржи, рждрж╛рж░ржкрж░ ржнрж┐ржбрж┐ржУред ржЕржержмрж╛ ржкрзНрж░ржержорзЗ ржнрж┐ржбрж┐ржУ, рждрж╛рж░ржкрж░ ржЫржмрж┐ред ржмржЯ рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзЗржЯ ржХрж░рзЗ ржжрзЗржмрзЗред\n\n"
        "тЬЕ **ржЖржкржирж╛рж░ ржЬржирзНржп ржХржорж╛ржирзНржбрж╕ржорзВрж╣:**\n"
        "тЮв /show_cover - ржмрж░рзНрждржорж╛ржирзЗ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржжрзЗржЦрждрзЗред\n"
        "тЮв /del_cover - рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗред\n\n"
        "ржПржЦржиржЗ ржПржХржЯрж┐ ржЫржмрж┐ ржмрж╛ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж┐рзЯрзЗ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рзБржи!"
    )

# --- ржмрж╛ржХрж┐ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЧрзБрж▓рзЛ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржерж╛ржХржмрзЗ ---

@app.on_message(filters.command("show_cover"))
async def show_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.get(user_id)
    if not cover_path or not os.path.exists(cover_path):
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржПржЦржирзЛ ржХрзЛржирзЛ ржХржнрж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржирзЗржЗред ржкрзНрж░ржержорзЗ ржПржХржЯрж┐ ржЫржмрж┐ ржкрж╛ржарж╛ржиред")
        return
    await client.send_photo(
        chat_id=message.chat.id,
        photo=cover_path,
        caption="ЁЯУМ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржирзЗ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░/ржерж╛ржорзНржмржирзЗржЗрж▓ред"
    )

@app.on_message(filters.command("del_cover"))
async def del_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.pop(user_id, None)
    if cover_path:
        cleanup_file(cover_path)
        await message.reply_text("тЬЕ ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред")
    else:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрзЛржирзЛ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫрж┐рж▓ ржирж╛ред")

@app.on_message(filters.photo & ~filters.edited)
async def receive_photo(client: Client, message: Message):
    user_id = message.from_user.id
    old_cover_path = user_cover.get(user_id)
    cleanup_file(old_cover_path)
    
    status_msg = await message.reply_text("ЁЯУе ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
    photo_path = await message.download(file_name=f"downloads/{user_id}_cover.jpg")
    user_cover[user_id] = photo_path

    pending_video = video_pending.get(user_id)
    if pending_video:
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            await client.send_video(
                chat_id=pending_video["chat_id"],
                video=pending_video["video_path"],
                thumb=photo_path,
                caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУрж░ рж╕рж╛ржерзЗ ржХрж╛рж╕рзНржЯржо ржерж╛ржорзНржмржирзЗржЗрж▓ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
                reply_to_message_id=pending_video["video_msg_id"],
            )
            await status_msg.edit_text("ЁЯкД ржнрж┐ржбрж┐ржУржЯрж┐рж░ ржЬржирзНржп ржХржнрж╛рж░ рж╕рзЗржЯ ржХрж░рзЗ ржкрж╛ржарж┐рзЯрзЗ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            cleanup_file(pending_video.get("video_path"))
            video_pending.pop(user_id, None)
    else:
        await status_msg.edit_text("тЬФя╕П ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ рж╕рзЗржн ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПржЦржи ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред")

@app.on_message(filters.video & ~filters.edited)
async def receive_video(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.get(user_id)
    
    status_msg = await message.reply_text("ЁЯУе ржнрж┐ржбрж┐ржУржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
    vid_path = await message.download(file_name=f"downloads/{user_id}_video.mp4")

    if cover_path and os.path.exists(cover_path):
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=vid_path,
                thumb=cover_path,
                caption="тЬЕ ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУржЯрж┐ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░рж╕рж╣ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред",
                reply_to_message_id=message.message_id,
            )
            await status_msg.edit_text("ЁЯОЙ рж╕ржлрж▓ржнрж╛ржмрзЗ ржХрж╛рж╕рзНржЯржо ржХржнрж╛рж░рж╕рж╣ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            cleanup_file(vid_path)
    else:
        old_pending_video = video_pending.get(user_id)
        if old_pending_video:
            cleanup_file(old_pending_video.get("video_path"))

        video_pending[user_id] = {
            "video_path": vid_path,
            "video_msg_id": message.message_id,
            "chat_id": message.chat.id,
        }
        await status_msg.edit_text("тЬФя╕П ржнрж┐ржбрж┐ржУ ржкрзЗрзЯрзЗржЫрж┐ред ржПржЦржи ржПржХржЯрж┐ ржерж╛ржорзНржмржирзЗржЗрж▓ (ржЫржмрж┐) ржкрж╛ржарж╛ржиред")


# --- ржУрзЯрзЗржмрж╣рзБржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░: ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржерзЗржХрзЗ ржЖрж╕рж╛ рж╕ржм ржЖржкржбрзЗржЯ ржПржЦрж╛ржирзЗ ржЖрж╕ржмрзЗ ---
async def webhook_handler(request):
    try:
        update = await request.json()
        await app.feed_raw_update(update)
        return web.Response(status=200)
    except Exception as e:
        print(f"ржУрзЯрзЗржмрж╣рзБржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return web.Response(status=500)

# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╢рзБрж░рзБ ржПржмржВ ржмржирзНржз ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
async def on_startup(web_app):
    print("ржУрзЯрзЗржм ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    if not os.path.isdir("downloads"):
        os.makedirs("downloads")
    
    await app.start()
    # ржмржЯ ржЯрзЛржХрзЗржи ржжрж┐рзЯрзЗ ржПржХржЯрж┐ рж╕рж┐ржХрзНрж░рзЗржЯ URL рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    webhook_path = f"/{BOT_TOKEN}"
    full_webhook_url = WEBHOOK_URL.rstrip('/') + webhook_path

    try:
        await app.set_bot_webhook(url=full_webhook_url)
        await app.set_bot_commands(BOT_COMMANDS) # ржмржЯ ржЪрж╛рж▓рзБ рж╣рж▓рзЗржЗ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ рж╕рзЗржЯ рж╣рзЯрзЗ ржпрж╛ржмрзЗ
        print(f"ржУрзЯрзЗржмрж╣рзБржХ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {full_webhook_url}")
        print("ржмржЯ ржПржЦржи ржЪрж▓ржЫрзЗ...")
    except Exception as e:
        print(f"ржУрзЯрзЗржмрж╣рзБржХ рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {e}")

async def on_shutdown(web_app):
    print("ржУрзЯрзЗржм ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржмржирзНржз рж╣ржЪрзНржЫрзЗ...")
    await app.stop()
    print("ржмржЯ ржмржирзНржз рж╣рзЯрзЗржЫрзЗред")

# --- ржорзВрж▓ ржУрзЯрзЗржм ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ---
if __name__ == "__main__":
    web_app = web.Application()
    
    # ржпржЦржи ржЕрзНржпрж╛ржк ржЪрж╛рж▓рзБ рж╣ржмрзЗ ржПржмржВ ржмржирзНржз рж╣ржмрзЗ, рждржЦржи ржХрзА рж╣ржмрзЗ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛
    web_app.on_startup.append(on_startup)
    web_app.on_shutdown.append(on_shutdown)
    
    # ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржерзЗржХрзЗ ржЖрж╕рж╛ POST рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ ржЬржирзНржп рж░рзБржЯ
    web_app.router.add_post(f"/{BOT_TOKEN}", webhook_handler)
    
    # ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛
    web.run_app(web_app, host="0.0.0.0", port=PORT)
