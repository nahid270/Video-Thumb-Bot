import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web

# --- ржзрж╛ржк рзз: .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
load_dotenv()

# --- ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080)) # Render ржПржЗ ржкрзЛрж░рзНржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ

# --- ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржарж┐ржХржорждрзЛ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ ---
if not all([API_ID, API_HASH, BOT_TOKEN]):
    raise ValueError("ржкрзНрж░рзЯрзЛржЬржирзАрзЯ Environment Variables (API_ID, API_HASH, BOT_TOKEN) рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")

API_ID = int(API_ID)

# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╕рзНржЯрзЛрж░рзЗржЬ ---
video_pending = {}
user_cover = {}

# --- Pyrogram ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ (ржкрзЛрж▓рж┐ржВ ржорзЛржбрзЗрж░ ржЬржирзНржп) ---
app = Client("thumb_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- ржлрж╛ржЗрж▓ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи ---
def cleanup_file(path):
    try:
        if path and os.path.exists(path):
            os.remove(path)
    except Exception as e:
        print(f"ржлрж╛ржЗрж▓ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {path}: {e}")

# --- ржмржЯ ржХржорж╛ржирзНржб рж▓рж┐рж╕рзНржЯ ---
BOT_COMMANDS = [
    types.BotCommand("start", "ЁЯдЦ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи"),
    types.BotCommand("show_cover", "ЁЯЦ╝я╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржжрзЗржЦрзБржи"),
    types.BotCommand("del_cover", "ЁЯЧСя╕П рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзБржи"),
]

# --- рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЧрзБрж▓рзЛ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ---
@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    await message.reply_text("ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! ржмржЯржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрж▓ржЫрзЗред")

@app.on_message(filters.command("show_cover"))
async def show_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.get(user_id)
    if not cover_path or not os.path.exists(cover_path):
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржПржЦржирзЛ ржХрзЛржирзЛ ржХржнрж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржирзЗржЗред")
        return
    await client.send_photo(chat_id=message.chat.id, photo=cover_path, caption="ЁЯУМ ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░/ржерж╛ржорзНржмржирзЗржЗрж▓ред")

@app.on_message(filters.command("del_cover"))
async def del_cover(client: Client, message: Message):
    user_id = message.from_user.id
    cover_path = user_cover.pop(user_id, None)
    if cover_path:
        cleanup_file(cover_path)
        await message.reply_text("тЬЕ ржЖржкржирж╛рж░ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред")
    else:
        await message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржХрзЛржирзЛ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░ ржЫрж┐рж▓ ржирж╛ред")

@app.on_message(filters.photo)
async def receive_photo(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    cleanup_file(user_cover.get(user_id))
    status_msg = await message.reply_text("ЁЯУе ржХржнрж╛рж░ ржЫржмрж┐ржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
    photo_path = await message.download(file_name=f"downloads/{user_id}_cover.jpg")
    user_cover[user_id] = photo_path
    pending_video = video_pending.get(user_id)
    if pending_video:
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            await client.send_video(chat_id=pending_video["chat_id"], video=pending_video["video_path"], thumb=photo_path, caption="тЬЕ ржХрж╛рж╕рзНржЯржо ржерж╛ржорзНржмржирзЗржЗрж▓рж╕рж╣ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред", reply_to_message_id=pending_video["video_msg_id"])
            await status_msg.edit_text("ЁЯкД ржнрж┐ржбрж┐ржУрж░ ржЬржирзНржп ржХржнрж╛рж░ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            cleanup_file(pending_video.get("video_path"))
            video_pending.pop(user_id, None)
    else:
        await status_msg.edit_text("тЬФя╕П ржХржнрж╛рж░ ржЫржмрж┐ рж╕рзЗржн ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПржЦржи ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред")

@app.on_message(filters.video)
async def receive_video(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    cover_path = user_cover.get(user_id)
    status_msg = await message.reply_text("ЁЯУе ржнрж┐ржбрж┐ржУржЯрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", quote=True)
    vid_path = await message.download(file_name=f"downloads/{user_id}_video.mp4")
    if cover_path and os.path.exists(cover_path):
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        try:
            await client.send_video(chat_id=message.chat.id, video=vid_path, thumb=cover_path, caption="тЬЕ рж╕рзЗржн ржХрж░рж╛ ржХржнрж╛рж░рж╕рж╣ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред", reply_to_message_id=message.message_id)
            await status_msg.edit_text("ЁЯОЙ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            cleanup_file(vid_path)
    else:
        cleanup_file(video_pending.get(user_id, {}).get("video_path"))
        video_pending[user_id] = {"video_path": vid_path, "video_msg_id": message.message_id, "chat_id": message.chat.id}
        await status_msg.edit_text("тЬФя╕П ржнрж┐ржбрж┐ржУ ржкрзЗрзЯрзЗржЫрж┐ред ржПржЦржи ржерж╛ржорзНржмржирзЗржЗрж▓ ржЫржмрж┐ ржкрж╛ржарж╛ржиред")


# --- ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржпрж╛ Render-ржХрзЗ рж╕ржЪрж▓ рж░рж╛ржЦржмрзЗ ---
async def ping_handler(request):
    """ржПржЗ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ржЯрж┐ рж╢рзБржзрзБ ржПржХржЯрж┐ рж╕ржлрж▓ рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржмрзЗ, ржпрж╛рждрзЗ Render ржЕрзНржпрж╛ржкржЯрж┐ржХрзЗ рж╕ржЪрж▓ рж░рж╛ржЦрзЗред"""
    return web.Response(text="I am alive!", status=200)

async def start_web_server():
    """ржПржХржЯрж┐ ржЫрзЛржЯ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рзЗред"""
    web_app = web.Application()
    web_app.router.add_get("/", ping_handler) # рж░рзБржЯ URL-ржП ржкрж┐ржВ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛
    
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"тЬЕ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржкрж┐ржВ ржЧрзНрж░рж╣ржгрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд http://0.0.0.0:{PORT} ржкрзЛрж░рзНржЯрзЗ")

# --- ржорзВрж▓ ржлрж╛ржВрж╢ржи ржпрж╛ ржмржЯ ржПржмржВ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржЙржнржпрж╝ржЗ ржЪрж╛рж▓рзБ ржХрж░ржмрзЗ ---
async def main():
    print("--- ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ ---")
    if not os.path.isdir("downloads"):
        os.makedirs("downloads")
    
    # ржмржЯ ржПржмржВ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржПржХрж╕рж╛ржерзЗ (concurrently) ржЪрж╛рж▓рж╛ржирзЛ
    await asyncio.gather(
        app.start(),
        start_web_server()
    )
    
    await app.set_bot_commands(BOT_COMMANDS)
    print("ЁЯЪА ржмржЯ ржПржЦржи ржЕржирж▓рж╛ржЗржирзЗ ржЖржЫрзЗ ржПржмржВ ржкрзЛрж▓рж┐ржВ ржорзЛржбрзЗ ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ...")
    
    # ржмржЯржХрзЗ ржЕржирж┐рж░рзНржжрж┐рж╖рзНржЯржХрж╛рж▓рзЗрж░ ржЬржирзНржп ржЪрж▓рждрзЗ ржжрзЗржУрзЯрж╛
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        app.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("ржмржЯ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛред")
