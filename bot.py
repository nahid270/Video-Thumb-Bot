import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web
from PIL import Image

# --- .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ---
load_dotenv()
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))
LOG_CHANNEL_ID_STR = os.getenv("LOG_CHANNEL_ID")

if not all([API_ID, API_HASH, BOT_TOKEN, LOG_CHANNEL_ID_STR]):
    raise ValueError("‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü Environment Variables ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")

API_ID = int(API_ID)
LOG_CHANNEL_ID = int(LOG_CHANNEL_ID_STR)

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ---
user_data = {}

app = Client("thumb_bot_final", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ---
def cleanup_files(*paths):
    for path in paths:
        try:
            if path and os.path.exists(path):
                os.remove(path)
        except Exception as e:
            print(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {path}: {e}")

def create_thumbnail(file_path: str) -> str:
    try:
        thumb_path = f"{file_path}_thumb.jpg"
        with Image.open(file_path) as img:
            img.thumbnail((320, 320))
            if img.mode == 'RGBA':
                img = img.convert('RGB')
            img.save(thumb_path, "JPEG")
        return thumb_path
    except Exception as e:
        print(f"‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return None

async def get_new_file_id(message: Message):
    try:
        copied_message = await message.copy(chat_id=LOG_CHANNEL_ID)
        return copied_message.video.file_id if copied_message.video else None
    except Exception as e:
        print(f"‡¶≤‡¶ó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return None

# --- ‚òÖ‚òÖ‚òÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‚òÖ‚òÖ‚òÖ ---
async def edit_status(message: Message, new_text: str):
    """
    ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡¶¶‡¶ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶∞‡¶∞ ‡¶è‡ßú‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§
    """
    try:
        # ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶π‡ßü, ‡¶§‡¶¨‡ßá‡¶á ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá
        if message.text != new_text:
            await message.edit_text(new_text)
    except Exception as e:
        # MessageNotModified ‡¶è‡¶∞‡¶∞ ‡¶â‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
        if "MESSAGE_NOT_MODIFIED" not in str(e):
            print(f"‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    user_id = message.from_user.id
    cleanup_files(user_data.get(user_id, {}).get("thumb_path"))
    user_data.pop(user_id, None)
    await message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶õ‡¶¨‡¶ø ‡¶ì ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡•§")

@app.on_message(filters.photo)
async def receive_photo(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    
    status_msg = await message.reply_text("üñºÔ∏è ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø...", quote=True)
    
    original_photo_path = await message.download(file_name=f"downloads/{message.id}_original.jpg")
    thumb_path = create_thumbnail(original_photo_path)
    
    if not thumb_path:
        await edit_status(status_msg, "‚ùå ‡¶è‡¶á ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        cleanup_files(original_photo_path)
        return

    if user_id not in user_data:
        user_data[user_id] = {}
    
    cleanup_files(user_data[user_id].get("thumb_path"))
    user_data[user_id]['thumb_path'] = thumb_path
    user_data[user_id]['status_msg_id'] = status_msg.id # ‚òÖ‚òÖ‚òÖ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
    
    if 'video_id' in user_data[user_id]:
        await edit_status(status_msg, "‚è≥ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø...")
        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=user_data[user_id]['video_id'],
                thumb=user_data[user_id]['thumb_path'],
                caption="‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
                reply_to_message_id=user_data[user_id]['video_msg_id']
            )
            await status_msg.delete()
        except Exception as e:
            await edit_status(status_msg, f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        finally:
            cleanup_files(user_data[user_id].get("thumb_path"))
            user_data.pop(user_id, None)
    else:
        # ‚òÖ‚òÖ‚òÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‚òÖ‚òÖ‚òÖ
        await edit_status(status_msg, "‚úîÔ∏è ‡¶ï‡¶≠‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§ ‡¶è‡¶ñ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")
    
    cleanup_files(original_photo_path)

@app.on_message(filters.video)
async def receive_video(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id

    status_msg = await message.reply_text("üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶õ‡¶ø...", quote=True)

    new_video_id = await get_new_file_id(message)
    if not new_video_id:
        await edit_status(status_msg, "‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return
        
    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]['video_id'] = new_video_id
    user_data[user_id]['video_msg_id'] = message.id
    
    if 'thumb_path' in user_data[user_id]:
        # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
        try:
            status_msg_id = user_data[user_id].get('status_msg_id')
            if status_msg_id:
                await client.delete_messages(chat_id=message.chat.id, message_ids=status_msg.id)
                status_msg_to_edit = await client.get_messages(chat_id=message.chat.id, message_ids=status_msg_id)
                await edit_status(status_msg_to_edit, "‚è≥ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø...")
            else: # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
                status_msg_to_edit = status_msg
        except:
             status_msg_to_edit = status_msg

        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=user_data[user_id]['video_id'],
                thumb=user_data[user_id]['thumb_path'],
                caption="‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
                reply_to_message_id=message.id
            )
            await status_msg_to_edit.delete()
        except Exception as e:
            await edit_status(status_msg_to_edit, f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        finally:
            cleanup_files(user_data[user_id].get("thumb_path"))
            user_data.pop(user_id, None)
    else:
        await edit_status(status_msg, "‚úîÔ∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§ ‡¶è‡¶ñ‡¶® ‡¶•‡¶æ‡¶Æ‡ßç‡¶¨‡¶®‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§")

# --- ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---

async def on_startup(web_app):
    if not os.path.isdir("downloads"):
        os.makedirs("downloads")
    await asyncio.gather(app.start(), start_web_server())
    print("üöÄ ‡¶¨‡¶ü ‡¶è‡¶ñ‡¶® ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ü‡¶õ‡ßá‡•§")

async def start_web_server():
    web_app = web.Application()
    async def ping_handler(request):
        return web.Response(text="alive", status=200)
    web_app.router.add_get("/", ping_handler)
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(None))
    loop.run_forever()
