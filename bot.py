import os
import asyncio
from pyrogram import Client, filters, types
from pyrogram.types import Message
from dotenv import load_dotenv
from aiohttp import web

# --- .env ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
load_dotenv()

# --- ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ рж▓рзЛржб ржХрж░рж╛ ---
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))
# --- тШЕтШЕтШЕ ржирждрзБржи ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓: рж▓ржЧ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐ тШЕтШЕтШЕ ---
LOG_CHANNEL_ID = int(os.getenv("LOG_CHANNEL_ID", "0"))

# --- ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржарж┐ржХржорждрзЛ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ ---
if not all([API_ID, API_HASH, BOT_TOKEN, LOG_CHANNEL_ID]):
    raise ValueError("ржкрзНрж░рзЯрзЛржЬржирзАрзЯ Environment Variables (API_ID, API_HASH, BOT_TOKEN, LOG_CHANNEL_ID) рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")

API_ID = int(API_ID)

# --- ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рж╕рзНржЯрзЛрж░рзЗржЬ ---
user_data = {} # {user_id: {"cover_id": "...", "video_id": "...", "video_msg_id": ...}}

app = Client("thumb_bot_final", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- тШЕтШЕтШЕ ржирждрзБржи ржлрж╛ржВрж╢ржи: ржлрж╛ржЗрж▓ ржлрж░рзЛржпрж╝рж╛рж░рзНржб ржХрж░рзЗ ржирждрзБржи file_id ржкрж╛ржУрзЯрж╛ тШЕтШЕтШЕ ---
async def get_new_file_id(file_id):
    try:
        # ржлрж╛ржЗрж▓ржЯрж┐ рж▓ржЧ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржлрж░рзЛржпрж╝рж╛рж░рзНржб ржХрж░рж╛
        forwarded_message = await app.send_cached_media(
            chat_id=LOG_CHANNEL_ID,
            file_id=file_id
        )
        # ржлрж░рзЛржпрж╝рж╛рж░рзНржб ржХрж░рж╛ ржорзЗрж╕рзЗржЬ ржерзЗржХрзЗ ржирждрзБржи file_id рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛
        if forwarded_message.video:
            return forwarded_message.video.file_id
        elif forwarded_message.photo:
            return forwarded_message.photo.file_id
        return None
    except Exception as e:
        print(f"рж▓ржЧ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржлрж░рзЛржпрж╝рж╛рж░рзНржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return None

@app.on_message(filters.command("start"))
async def start_cmd(client: Client, message: Message):
    user_data.pop(message.from_user.id, None) # рж╢рзБрж░рзБ ржХрж░рж▓рзЗ ржбрзЗржЯрж╛ рж░рж┐рж╕рзЗржЯ
    await message.reply_text("ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! ржЫржмрж┐ ржУ ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржи, ржЖржорж┐ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзЗржЯ ржХрж░рзЗ ржжрзЗржмред")

# --- ржбрж┐рж▓рж┐ржЯ ржПржмржВ рж╢рзЛ ржХржорж╛ржирзНржб ржПржЦржи ржкрзНрж░рзЯрзЛржЬржи ржирзЗржЗ, ржХрж╛рж░ржг ржлрзНрж▓рзЛ рж╕рж╣ржЬ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ---
# ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржПржЧрзБрж▓рзЛ рж░рж╛ржЦрждрзЗ ржкрж╛рж░рзЗржи, рждржмрзЗ ржорзВрж▓ ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛рж░ ржЬржирзНржп ржПржЦржи ржЖрж░ ржЬрж░рзБрж░рж┐ ржирзЯред

@app.on_message(filters.photo)
async def receive_photo(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id
    
    status_msg = await message.reply_text("ЁЯЦ╝я╕П ржЫржмрж┐ ржкрзЗрзЯрзЗржЫрж┐, ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржЫрж┐...", quote=True)
    
    new_photo_id = await get_new_file_id(message.photo.file_id)
    if not new_photo_id:
        await status_msg.edit_text("тЭМ ржЫржмрж┐ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред")
        return

    # ржЗржЙржЬрж╛рж░рзЗрж░ ржбрзЗржЯрж╛ ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ ржХрж░рж╛
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]['cover_id'] = new_photo_id
    
    # ржпржжрж┐ ржЖржЧрзЗ ржнрж┐ржбрж┐ржУ ржПрж╕рзЗ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржПржЦржи ржПржХрж╕рж╛ржерзЗ ржкрж╛ржарж╛ржУ
    if 'video_id' in user_data[user_id]:
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржПржмржВ ржерж╛ржорзНржмржирзЗржЗрж▓ ржПржХрждрзНрж░рж┐ржд ржХрж░ржЫрж┐...")
        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=user_data[user_id]['video_id'],
                thumb=user_data[user_id]['cover_id'],
                caption="тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
                reply_to_message_id=user_data[user_id]['video_msg_id']
            )
            await status_msg.delete()
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            user_data.pop(user_id, None) # ржХрж╛ржЬ рж╢рзЗрж╖рзЗ ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
    else:
        await status_msg.edit_text("тЬФя╕П ржХржнрж╛рж░ ржЫржмрж┐ ржкрзНрж░рж╕рзНрждрзБрждред ржПржЦржи ржнрж┐ржбрж┐ржУ ржкрж╛ржарж╛ржиред")

@app.on_message(filters.video)
async def receive_video(client: Client, message: Message):
    if message.from_user is None: return
    user_id = message.from_user.id

    status_msg = await message.reply_text("ЁЯОм ржнрж┐ржбрж┐ржУ ржкрзЗрзЯрзЗржЫрж┐, ржкрзНрж░рж╕рзЗрж╕ ржХрж░ржЫрж┐...", quote=True)

    new_video_id = await get_new_file_id(message.video.file_id)
    if not new_video_id:
        await status_msg.edit_text("тЭМ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред")
        return
        
    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]['video_id'] = new_video_id
    user_data[user_id]['video_msg_id'] = message.id
    
    if 'cover_id' in user_data[user_id]:
        await status_msg.edit_text("тП│ ржнрж┐ржбрж┐ржУ ржПржмржВ ржерж╛ржорзНржмржирзЗржЗрж▓ ржПржХрждрзНрж░рж┐ржд ржХрж░ржЫрж┐...")
        try:
            await client.send_video(
                chat_id=message.chat.id,
                video=user_data[user_id]['video_id'],
                thumb=user_data[user_id]['cover_id'],
                caption="тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржерж╛ржорзНржмржирзЗржЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред",
                reply_to_message_id=message.id
            )
            await status_msg.delete()
        except Exception as e:
            await status_msg.edit_text(f"тЭМ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        finally:
            user_data.pop(user_id, None)
    else:
        await status_msg.edit_text("тЬФя╕П ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзНрждрзБрждред ржПржЦржи ржерж╛ржорзНржмржирзЗржЗрж▓рзЗрж░ ржЬржирзНржп ржЫржмрж┐ ржкрж╛ржарж╛ржиред")


# --- ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржПржмржВ ржорзВрж▓ ржлрж╛ржВрж╢ржи (ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ---
async def ping_handler(request):
    return web.Response(text="I am alive!", status=200)

async def start_web_server():
    web_app = web.Application()
    web_app.router.add_get("/", ping_handler)
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"тЬЕ ржУржпрж╝рзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржкрж┐ржВ ржЧрзНрж░рж╣ржгрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд http://0.0.0.0:{PORT} ржкрзЛрж░рзНржЯрзЗ")

async def main():
    await asyncio.gather(app.start(), start_web_server())
    # ржХржорж╛ржирзНржб рж╕рзЗржЯ ржХрж░рж╛рж░ ржкрзНрж░рзЯрзЛржЬржи ржирзЗржЗ ржХрж╛рж░ржг ржЖржорж░рж╛ рж╕рзЗржЧрзБрж▓рзЛ ржмрж╛ржж ржжрж┐рзЯрзЗржЫрж┐
    # await app.set_bot_commands(BOT_COMMANDS) 
    print("ЁЯЪА ржмржЯ ржПржЦржи ржЕржирж▓рж╛ржЗржирзЗ ржЖржЫрзЗ ржПржмржВ ржкрзЛрж▓рж┐ржВ ржорзЛржбрзЗ ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ...")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        app.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("ржмржЯ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛред")
